#!/bin/bash

# Define file paths
user_database="users.db"
project_files_dir="project_files"
project_key="project.key"

# Ensure the environment is set up
setup_environment() {
    echo "Setting up environment..."
    apt update && apt upgrade -y
    apt install -y nano git openssl
    mkdir -p "$project_files_dir" "users"
    touch "$user_database"
    if [ ! -f "$project_key" ]; then
        openssl rand -hex 32 > "$project_key"
    fi
    echo "Environment setup complete!"
}

# Encrypt/Decrypt Functions
encrypt_file() {
    openssl enc -aes-256-cbc -salt -in "$1" -out "$1.enc" -pass file:"$project_key" && rm "$1"
}
decrypt_file() {
    openssl enc -aes-256-cbc -d -in "$1.enc" -out "$1" -pass file:"$project_key"
}

# Encrypt/Decrypt Project Files
encrypt_project_files() {
    for file in "$project_files_dir"/*; do
        [ -f "$file" ] && encrypt_file "$file"
    done
}
decrypt_project_files() {
    for file in "$project_files_dir"/*.enc; do
        decrypt_file "$file"
    done
}

# Encrypt Passwords
encrypt_password() {
    echo "$1" | sha256sum | awk '{print $1}'
}

# Create a New User
create_user() {
    clear
    echo "====================================="
    echo "         Create New User             "
    echo "====================================="
    echo -n "Enter new username: "
    read new_username

    if grep -q "^$new_username:" "$user_database"; then
        echo "Username already exists. Please try again."
        sleep 2
        return
    fi

    echo -n "Enter new password: "
    read -s new_password
    echo
    echo -n "Confirm password: "
    read -s confirm_password
    echo

    if [[ $new_password == $confirm_password ]]; then
        encrypted_password=$(encrypt_password "$new_password")
        echo "$new_username:$encrypted_password" >> "$user_database"

        # Create user directory and encrypt it
        mkdir -p "users/$new_username"
        echo "User created successfully!"
        sleep 2
    else
        echo "Passwords do not match. Please try again."
        sleep 2
    fi
}

# Login Function
login_user() {
    clear
    echo "====================================="
    echo "         User Login Page             "
    echo "====================================="
    echo -n "Enter Username: "
    read username
    echo -n "Enter Password: "
    read -s password
    echo

    encrypted_password=$(encrypt_password "$password")

    if grep -q "^$username:$encrypted_password" "$user_database"; then
        echo -e "\nLogin Successful!"
        sleep 1

        # Navigate to the user's directory
        user_directory="users/$username"
        mkdir -p "$user_directory"

        # Decrypt previous session data
        if [ -f "$user_directory/session.tar.gz.enc" ]; then
            decrypt_file "$user_directory/session.tar.gz"
            tar -xzf "$user_directory/session.tar.gz" -C "$user_directory"
            rm "$user_directory/session.tar.gz"
        fi

        # Launch the main interface
        main_interface "$username" "$password"
    else
        echo -e "\nInvalid Username or Password. Please try again."
        sleep 2
    fi
}

# Main User Interface
main_interface() {
    username=$1
    password=$2
    while true; do
        clear
        echo "====================================="
        echo "     Welcome, $username!             "
        echo "       Your Secure Workspace         "
        echo "====================================="
        echo
        echo "1. Create/Edit a File"
        echo "2. View Saved Files"
        echo "3. Logout"
        echo "====================================="
        echo -n "Choose an option: "
        read choice

        case $choice in
            1)
                echo -n "Enter file name (e.g., myfile.txt): "
                read filename
                nano "$user_directory/$filename"
                echo "File saved to $user_directory/$filename"
                sleep 2
                ;;
            2)
                echo "Saved Files:"
                ls "$user_directory"
                echo "Press Enter to return to the menu."
                read
                ;;
            3)
                echo "Logging out... Saving your session..."
                
                # Save session data
                tar -czf "$user_directory/session.tar.gz" -C "$user_directory" .
                encrypt_file "$user_directory/session.tar.gz"

                # Encrypt and sync to GitHub
                echo "Syncing progress to GitHub..."
                git add .
                git commit -m "Auto-save progress for user $username"
                git push
                echo "Session saved and synced!"
                sleep 2

                break
                ;;
            *)
                echo "Invalid option. Please try again."
                sleep 2
                ;;
        esac
    done
}

# Start Script
setup_environment
encrypt_project_files

while true; do
    clear
    echo "====================================="
    echo "         Secure Multi-User Login     "
    echo "====================================="
    echo "1. Login"
    echo "2. Create New User"
    echo "3. Exit"
    echo "====================================="
    echo -n "Choose an option: "
    read main_choice

    case $main_choice in
        1)
            decrypt_project_files
            login_user
            ;;
        2)
            decrypt_project_files
            create_user
            ;;
        3)
            echo "Exiting... Goodbye!"
            encrypt_project_files
            exit 0
            ;;
        *)
            echo "Invalid option. Please try again."
            sleep 2
            ;;
    esac
done
    
